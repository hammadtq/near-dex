{"version":3,"sources":["assets/vendors/general/wnumb/wNumb.js"],"names":["factory","define","amd","exports","module","window","wNumb","FormatOptions","strReverse","a","split","reverse","join","strStartsWith","input","match","substring","length","strEndsWith","slice","throwEqualError","F","b","Error","isValidNumber","isFinite","toFixed","value","exp","toString","Math","round","formatTo","decimals","thousand","mark","prefix","suffix","encoder","decoder","negativeBefore","negative","edit","undo","originalInput","inputIsNegative","inputPieces","inputBase","inputDecimals","output","parseFloat","abs","indexOf","formatFrom","replace","Number","validate","inputOptions","i","optionName","optionValue","filteredOptions","undefined","passAll","options","method","args","push","apply","to","from"],"mappings":"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","file":"wNumb.3b92f8df.js","sourceRoot":"../src","sourcesContent":["(function (factory) {\r\n\r\n    if ( typeof define === 'function' && define.amd ) {\r\n\r\n        // AMD. Register as an anonymous module.\r\n        define([], factory);\r\n\r\n    } else if ( typeof exports === 'object' ) {\r\n\r\n        // Node/CommonJS\r\n        module.exports = factory();\r\n\r\n    } else {\r\n\r\n        // Browser globals\r\n        window.wNumb = factory();\r\n    }\r\n\r\n}(function(){\r\n\r\n\t'use strict';\r\n\r\nvar FormatOptions = [\r\n\t'decimals',\r\n\t'thousand',\r\n\t'mark',\r\n\t'prefix',\r\n\t'suffix',\r\n\t'encoder',\r\n\t'decoder',\r\n\t'negativeBefore',\r\n\t'negative',\r\n\t'edit',\r\n\t'undo'\r\n];\r\n\r\n// General\r\n\r\n\t// Reverse a string\r\n\tfunction strReverse ( a ) {\r\n\t\treturn a.split('').reverse().join('');\r\n\t}\r\n\r\n\t// Check if a string starts with a specified prefix.\r\n\tfunction strStartsWith ( input, match ) {\r\n\t\treturn input.substring(0, match.length) === match;\r\n\t}\r\n\r\n\t// Check is a string ends in a specified suffix.\r\n\tfunction strEndsWith ( input, match ) {\r\n\t\treturn input.slice(-1 * match.length) === match;\r\n\t}\r\n\r\n\t// Throw an error if formatting options are incompatible.\r\n\tfunction throwEqualError( F, a, b ) {\r\n\t\tif ( (F[a] || F[b]) && (F[a] === F[b]) ) {\r\n\t\t\tthrow new Error(a);\r\n\t\t}\r\n\t}\r\n\r\n\t// Check if a number is finite and not NaN\r\n\tfunction isValidNumber ( input ) {\r\n\t\treturn typeof input === 'number' && isFinite( input );\r\n\t}\r\n\r\n\t// Provide rounding-accurate toFixed method.\r\n\t// Borrowed: http://stackoverflow.com/a/21323330/775265\r\n\tfunction toFixed ( value, exp ) {\r\n\t\tvalue = value.toString().split('e');\r\n\t\tvalue = Math.round(+(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp)));\r\n\t\tvalue = value.toString().split('e');\r\n\t\treturn (+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp))).toFixed(exp);\r\n\t}\r\n\r\n\r\n// Formatting\r\n\r\n\t// Accept a number as input, output formatted string.\r\n\tfunction formatTo ( decimals, thousand, mark, prefix, suffix, encoder, decoder, negativeBefore, negative, edit, undo, input ) {\r\n\r\n\t\tvar originalInput = input, inputIsNegative, inputPieces, inputBase, inputDecimals = '', output = '';\r\n\r\n\t\t// Apply user encoder to the input.\r\n\t\t// Expected outcome: number.\r\n\t\tif ( encoder ) {\r\n\t\t\tinput = encoder(input);\r\n\t\t}\r\n\r\n\t\t// Stop if no valid number was provided, the number is infinite or NaN.\r\n\t\tif ( !isValidNumber(input) ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Rounding away decimals might cause a value of -0\r\n\t\t// when using very small ranges. Remove those cases.\r\n\t\tif ( decimals !== false && parseFloat(input.toFixed(decimals)) === 0 ) {\r\n\t\t\tinput = 0;\r\n\t\t}\r\n\r\n\t\t// Formatting is done on absolute numbers,\r\n\t\t// decorated by an optional negative symbol.\r\n\t\tif ( input < 0 ) {\r\n\t\t\tinputIsNegative = true;\r\n\t\t\tinput = Math.abs(input);\r\n\t\t}\r\n\r\n\t\t// Reduce the number of decimals to the specified option.\r\n\t\tif ( decimals !== false ) {\r\n\t\t\tinput = toFixed( input, decimals );\r\n\t\t}\r\n\r\n\t\t// Transform the number into a string, so it can be split.\r\n\t\tinput = input.toString();\r\n\r\n\t\t// Break the number on the decimal separator.\r\n\t\tif ( input.indexOf('.') !== -1 ) {\r\n\t\t\tinputPieces = input.split('.');\r\n\r\n\t\t\tinputBase = inputPieces[0];\r\n\r\n\t\t\tif ( mark ) {\r\n\t\t\t\tinputDecimals = mark + inputPieces[1];\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t// If it isn't split, the entire number will do.\r\n\t\t\tinputBase = input;\r\n\t\t}\r\n\r\n\t\t// Group numbers in sets of three.\r\n\t\tif ( thousand ) {\r\n\t\t\tinputBase = strReverse(inputBase).match(/.{1,3}/g);\r\n\t\t\tinputBase = strReverse(inputBase.join( strReverse( thousand ) ));\r\n\t\t}\r\n\r\n\t\t// If the number is negative, prefix with negation symbol.\r\n\t\tif ( inputIsNegative && negativeBefore ) {\r\n\t\t\toutput += negativeBefore;\r\n\t\t}\r\n\r\n\t\t// Prefix the number\r\n\t\tif ( prefix ) {\r\n\t\t\toutput += prefix;\r\n\t\t}\r\n\r\n\t\t// Normal negative option comes after the prefix. Defaults to '-'.\r\n\t\tif ( inputIsNegative && negative ) {\r\n\t\t\toutput += negative;\r\n\t\t}\r\n\r\n\t\t// Append the actual number.\r\n\t\toutput += inputBase;\r\n\t\toutput += inputDecimals;\r\n\r\n\t\t// Apply the suffix.\r\n\t\tif ( suffix ) {\r\n\t\t\toutput += suffix;\r\n\t\t}\r\n\r\n\t\t// Run the output through a user-specified post-formatter.\r\n\t\tif ( edit ) {\r\n\t\t\toutput = edit ( output, originalInput );\r\n\t\t}\r\n\r\n\t\t// All done.\r\n\t\treturn output;\r\n\t}\r\n\r\n\t// Accept a sting as input, output decoded number.\r\n\tfunction formatFrom ( decimals, thousand, mark, prefix, suffix, encoder, decoder, negativeBefore, negative, edit, undo, input ) {\r\n\r\n\t\tvar originalInput = input, inputIsNegative, output = '';\r\n\r\n\t\t// User defined pre-decoder. Result must be a non empty string.\r\n\t\tif ( undo ) {\r\n\t\t\tinput = undo(input);\r\n\t\t}\r\n\r\n\t\t// Test the input. Can't be empty.\r\n\t\tif ( !input || typeof input !== 'string' ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// If the string starts with the negativeBefore value: remove it.\r\n\t\t// Remember is was there, the number is negative.\r\n\t\tif ( negativeBefore && strStartsWith(input, negativeBefore) ) {\r\n\t\t\tinput = input.replace(negativeBefore, '');\r\n\t\t\tinputIsNegative = true;\r\n\t\t}\r\n\r\n\t\t// Repeat the same procedure for the prefix.\r\n\t\tif ( prefix && strStartsWith(input, prefix) ) {\r\n\t\t\tinput = input.replace(prefix, '');\r\n\t\t}\r\n\r\n\t\t// And again for negative.\r\n\t\tif ( negative && strStartsWith(input, negative) ) {\r\n\t\t\tinput = input.replace(negative, '');\r\n\t\t\tinputIsNegative = true;\r\n\t\t}\r\n\r\n\t\t// Remove the suffix.\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\r\n\t\tif ( suffix && strEndsWith(input, suffix) ) {\r\n\t\t\tinput = input.slice(0, -1 * suffix.length);\r\n\t\t}\r\n\r\n\t\t// Remove the thousand grouping.\r\n\t\tif ( thousand ) {\r\n\t\t\tinput = input.split(thousand).join('');\r\n\t\t}\r\n\r\n\t\t// Set the decimal separator back to period.\r\n\t\tif ( mark ) {\r\n\t\t\tinput = input.replace(mark, '.');\r\n\t\t}\r\n\r\n\t\t// Prepend the negative symbol.\r\n\t\tif ( inputIsNegative ) {\r\n\t\t\toutput += '-';\r\n\t\t}\r\n\r\n\t\t// Add the number\r\n\t\toutput += input;\r\n\r\n\t\t// Trim all non-numeric characters (allow '.' and '-');\r\n\t\toutput = output.replace(/[^0-9\\.\\-.]/g, '');\r\n\r\n\t\t// The value contains no parse-able number.\r\n\t\tif ( output === '' ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Covert to number.\r\n\t\toutput = Number(output);\r\n\r\n\t\t// Run the user-specified post-decoder.\r\n\t\tif ( decoder ) {\r\n\t\t\toutput = decoder(output);\r\n\t\t}\r\n\r\n\t\t// Check is the output is valid, otherwise: return false.\r\n\t\tif ( !isValidNumber(output) ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\t}\r\n\r\n\r\n// Framework\r\n\r\n\t// Validate formatting options\r\n\tfunction validate ( inputOptions ) {\r\n\r\n\t\tvar i, optionName, optionValue,\r\n\t\t\tfilteredOptions = {};\r\n\r\n\t\tif ( inputOptions['suffix'] === undefined ) {\r\n\t\t\tinputOptions['suffix'] = inputOptions['postfix'];\r\n\t\t}\r\n\r\n\t\tfor ( i = 0; i < FormatOptions.length; i+=1 ) {\r\n\r\n\t\t\toptionName = FormatOptions[i];\r\n\t\t\toptionValue = inputOptions[optionName];\r\n\r\n\t\t\tif ( optionValue === undefined ) {\r\n\r\n\t\t\t\t// Only default if negativeBefore isn't set.\r\n\t\t\t\tif ( optionName === 'negative' && !filteredOptions.negativeBefore ) {\r\n\t\t\t\t\tfilteredOptions[optionName] = '-';\r\n\t\t\t\t// Don't set a default for mark when 'thousand' is set.\r\n\t\t\t\t} else if ( optionName === 'mark' && filteredOptions.thousand !== '.' ) {\r\n\t\t\t\t\tfilteredOptions[optionName] = '.';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfilteredOptions[optionName] = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t// Floating points in JS are stable up to 7 decimals.\r\n\t\t\t} else if ( optionName === 'decimals' ) {\r\n\t\t\t\tif ( optionValue >= 0 && optionValue < 8 ) {\r\n\t\t\t\t\tfilteredOptions[optionName] = optionValue;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(optionName);\r\n\t\t\t\t}\r\n\r\n\t\t\t// These options, when provided, must be functions.\r\n\t\t\t} else if ( optionName === 'encoder' || optionName === 'decoder' || optionName === 'edit' || optionName === 'undo' ) {\r\n\t\t\t\tif ( typeof optionValue === 'function' ) {\r\n\t\t\t\t\tfilteredOptions[optionName] = optionValue;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(optionName);\r\n\t\t\t\t}\r\n\r\n\t\t\t// Other options are strings.\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( typeof optionValue === 'string' ) {\r\n\t\t\t\t\tfilteredOptions[optionName] = optionValue;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(optionName);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Some values can't be extracted from a\r\n\t\t// string if certain combinations are present.\r\n\t\tthrowEqualError(filteredOptions, 'mark', 'thousand');\r\n\t\tthrowEqualError(filteredOptions, 'prefix', 'negative');\r\n\t\tthrowEqualError(filteredOptions, 'prefix', 'negativeBefore');\r\n\r\n\t\treturn filteredOptions;\r\n\t}\r\n\r\n\t// Pass all options as function arguments\r\n\tfunction passAll ( options, method, input ) {\r\n\t\tvar i, args = [];\r\n\r\n\t\t// Add all options in order of FormatOptions\r\n\t\tfor ( i = 0; i < FormatOptions.length; i+=1 ) {\r\n\t\t\targs.push(options[FormatOptions[i]]);\r\n\t\t}\r\n\r\n\t\t// Append the input, then call the method, presenting all\r\n\t\t// options as arguments.\r\n\t\targs.push(input);\r\n\t\treturn method.apply('', args);\r\n\t}\r\n\r\n\tfunction wNumb ( options ) {\r\n\r\n\t\tif ( !(this instanceof wNumb) ) {\r\n\t\t\treturn new wNumb ( options );\r\n\t\t}\r\n\r\n\t\tif ( typeof options !== \"object\" ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\toptions = validate(options);\r\n\r\n\t\t// Call 'formatTo' with proper arguments.\r\n\t\tthis.to = function ( input ) {\r\n\t\t\treturn passAll(options, formatTo, input);\r\n\t\t};\r\n\r\n\t\t// Call 'formatFrom' with proper arguments.\r\n\t\tthis.from = function ( input ) {\r\n\t\t\treturn passAll(options, formatFrom, input);\r\n\t\t};\r\n\t}\r\n\r\n\treturn wNumb;\r\n\r\n}));\r\n"]}